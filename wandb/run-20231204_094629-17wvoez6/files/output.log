[[0.01917244 0.1001197  0.01917244]
 [0.1001197  0.52283142 0.1001197 ]
 [0.01917244 0.1001197  0.01917244]]
 training :  [[18.03702973 18.55778204]
 [21.17604524 19.47266133]
 [15.84883918 18.13400917]
 [15.05102631 17.95544908]
 [23.03840192 20.19960726]
 [16.56709618 18.22748071]
 [19.14214079 19.09880819]
 [19.47763912 19.33012168]
 [17.64394264 18.68479602]
 [18.89992928 19.03033539]
 [22.29695094 19.91076   ]
 [15.17107573 17.80713304]
 [15.90480303 18.06415118]
 [20.34625783 19.41121148]
 [15.92961701 18.07392523]
 [22.99224148 20.26448585]
 [17.32428733 18.48041447]
 [22.90750433 20.272429  ]
 [21.25553824 19.85241846]
 [21.31871943 19.62388238]
 [21.73116608 19.74043494]
 [15.09977074 17.6105712 ]
 [20.24870016 19.11887847]
 [20.24413663 19.36090305]
 [20.18447666 19.65301919]
 [22.01238047 19.99036152]
 [21.17139995 19.62692516]
 [15.54617888 17.96684783]
 [15.24837924 17.82650738]
 [16.62798806 18.37783764]
 [16.97433299 18.28907786]
 [15.37551798 17.76708397]
 [23.04181656 20.02283697]
 [19.17463007 18.9624041 ]
 [16.87707682 18.18702636]
 [21.11808293 19.52892135]
 [16.07300116 18.22250881]
 [22.9435995  20.17829537]
 [22.37994626 20.03659796]
 [15.77922209 18.1603455 ]] 40
 validation :  [[17.43120964 18.49816528]
 [18.85347845 19.03044463]
 [16.20586192 18.17613461]
 [22.46649865 20.01737479]
 [18.96711006 19.03458232]
 [15.40867389 17.77321752]
 [15.14274695 17.68666134]
 [15.41194395 17.99208732]
 [15.56230022 18.02634477]
 [19.19441638 19.04971833]
 [21.86633716 19.93785248]
 [20.85440698 19.65558399]
 [22.35991921 20.04673735]
 [18.94446606 19.028039  ]
 [22.19500449 20.06560825]
 [17.57076763 18.61564112]
 [22.39905158 20.00702348]
 [22.43730158 20.05168295]
 [21.46267803 19.87230549]
 [17.24803727 18.35170906]
 [15.30000344 17.95953353]
 [15.06132851 17.70455648]
 [15.11534719 17.92201106]
 [21.74827251 19.86847371]
 [17.07847402 18.51058874]
 [21.70350629 19.78329408]
 [20.65237884 19.24754669]
 [20.82109216 19.66940225]
 [17.76433677 18.64580894]
 [19.2267984  18.93571766]] 30
[[0.01917244 0.1001197  0.01917244]
 [0.1001197  0.52283142 0.1001197 ]
 [0.01917244 0.1001197  0.01917244]]
 training :  [[18.03702973 18.55778204]
 [21.17604524 19.47266133]
 [15.84883918 18.13400917]
 [15.05102631 17.95544908]
 [23.03840192 20.19960726]
 [16.56709618 18.22748071]
 [19.14214079 19.09880819]
 [19.47763912 19.33012168]
 [17.64394264 18.68479602]
 [18.89992928 19.03033539]
 [22.29695094 19.91076   ]
 [15.17107573 17.80713304]
 [15.90480303 18.06415118]
 [20.34625783 19.41121148]
 [15.92961701 18.07392523]
 [22.99224148 20.26448585]
 [17.32428733 18.48041447]
 [22.90750433 20.272429  ]
 [21.25553824 19.85241846]
 [21.31871943 19.62388238]
 [21.73116608 19.74043494]
 [15.09977074 17.6105712 ]
 [20.24870016 19.11887847]
 [20.24413663 19.36090305]
 [20.18447666 19.65301919]
 [22.01238047 19.99036152]
 [21.17139995 19.62692516]
 [15.54617888 17.96684783]
 [15.24837924 17.82650738]
 [16.62798806 18.37783764]
 [16.97433299 18.28907786]
 [15.37551798 17.76708397]
 [23.04181656 20.02283697]
 [19.17463007 18.9624041 ]
 [16.87707682 18.18702636]
 [21.11808293 19.52892135]
 [16.07300116 18.22250881]
 [22.9435995  20.17829537]
 [22.37994626 20.03659796]
 [15.77922209 18.1603455 ]] 40
 validation :  [[17.43120964 18.49816528]
 [18.85347845 19.03044463]
 [16.20586192 18.17613461]
 [22.46649865 20.01737479]
 [18.96711006 19.03458232]
 [15.40867389 17.77321752]
 [15.14274695 17.68666134]
 [15.41194395 17.99208732]
 [15.56230022 18.02634477]
 [19.19441638 19.04971833]
 [21.86633716 19.93785248]
 [20.85440698 19.65558399]
 [22.35991921 20.04673735]
 [18.94446606 19.028039  ]
 [22.19500449 20.06560825]
 [17.57076763 18.61564112]
 [22.39905158 20.00702348]
 [22.43730158 20.05168295]
 [21.46267803 19.87230549]
 [17.24803727 18.35170906]
 [15.30000344 17.95953353]
 [15.06132851 17.70455648]
 [15.11534719 17.92201106]
 [21.74827251 19.86847371]
 [17.07847402 18.51058874]
 [21.70350629 19.78329408]
 [20.65237884 19.24754669]
 [20.82109216 19.66940225]
 [17.76433677 18.64580894]
 [19.2267984  18.93571766]] 30
MultiInputPolicy(
  (q_net): QNetwork(
    (features_extractor): CombinedExtractor(
      (extractors): ModuleDict(
        (doseMaps): NatureCNN(
          (cnn): Sequential(
            (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
            (1): ReLU()
            (2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1))
            (3): ReLU()
            (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
            (7): ReLU()
            (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
            (9): ReLU()
            (10): Flatten(start_dim=1, end_dim=-1)
          )
          (linear): Sequential(
            (0): Linear(in_features=100352, out_features=256, bias=True)
            (1): ReLU()
          )
        )
        (incert): NatureCNN(
          (cnn): Sequential(
            (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(1, 1))
            (1): ReLU()
            (2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1))
            (3): ReLU()
            (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
            (7): ReLU()
            (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
            (9): ReLU()
            (10): Flatten(start_dim=1, end_dim=-1)
          )
          (linear): Sequential(
            (0): Linear(in_features=100352, out_features=256, bias=True)
            (1): ReLU()
          )
        )
      )
    )
    (q_net): Sequential(
      (0): Linear(in_features=512, out_features=128, bias=True)
      (1): ReLU()
      (2): Linear(in_features=128, out_features=64, bias=True)
      (3): ReLU()
      (4): Linear(in_features=64, out_features=32, bias=True)
      (5): ReLU()
      (6): Linear(in_features=32, out_features=6, bias=True)
    )
  )
  (q_net_target): QNetwork(
    (features_extractor): CombinedExtractor(
      (extractors): ModuleDict(
        (doseMaps): NatureCNN(
          (cnn): Sequential(
            (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
            (1): ReLU()
            (2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1))
            (3): ReLU()
            (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
            (7): ReLU()
            (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
            (9): ReLU()
            (10): Flatten(start_dim=1, end_dim=-1)
          )
          (linear): Sequential(
            (0): Linear(in_features=100352, out_features=256, bias=True)
            (1): ReLU()
          )
        )
        (incert): NatureCNN(
          (cnn): Sequential(
            (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(1, 1))
            (1): ReLU()
            (2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1))
            (3): ReLU()
            (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
            (7): ReLU()
            (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
            (9): ReLU()
            (10): Flatten(start_dim=1, end_dim=-1)
          )
          (linear): Sequential(
            (0): Linear(in_features=100352, out_features=256, bias=True)
            (1): ReLU()
          )
        )
      )
    )
    (q_net): Sequential(
      (0): Linear(in_features=512, out_features=128, bias=True)
      (1): ReLU()
      (2): Linear(in_features=128, out_features=64, bias=True)
      (3): ReLU()
      (4): Linear(in_features=64, out_features=32, bias=True)
      (5): ReLU()
      (6): Linear(in_features=32, out_features=6, bias=True)
    )
  )
)
epoch number :  0
training mode :  0 [16.62798806 18.37783764]
training mode :  1 [22.9435995  20.17829537]
/linux/meghislain/ARIES-RL/stable_baselines3/common/vec_env/patch_gym.py:49: UserWarning: You provided an OpenAI Gym environment. We strongly recommend transitioning to Gymnasium environments. Stable-Baselines3 is automatically wrapping your environments in a compatibility layer, which could potentially cause issues.
  warnings.warn(
Traceback (most recent call last):
  File "/linux/meghislain/ARIES-RL/main.py", line 49, in <module>
    model.learn(total_timesteps=TIMESTEPS)
  File "/linux/meghislain/ARIES-RL/stable_baselines3/dqn/dqn.py", line 268, in learn
    return super().learn(
  File "/linux/meghislain/ARIES-RL/stable_baselines3/common/off_policy_algorithm.py", line 349, in learn
    self.train(batch_size=self.batch_size, gradient_steps=gradient_steps)
  File "/linux/meghislain/ARIES-RL/stable_baselines3/dqn/dqn.py", line 218, in train
    loss.backward()
  File "/export/share/condaenv/STB3/lib/python3.9/site-packages/torch/_tensor.py", line 492, in backward
    torch.autograd.backward(
  File "/export/share/condaenv/STB3/lib/python3.9/site-packages/torch/autograd/__init__.py", line 251, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt