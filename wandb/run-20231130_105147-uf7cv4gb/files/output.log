[[9.41753536e-07 1.34110758e-04 7.00334845e-04 1.34110758e-04
  9.41753536e-07]
 [1.34110758e-04 1.90980916e-02 9.97314404e-02 1.90980916e-02
  1.34110758e-04]
 [7.00334845e-04 9.97314404e-02 5.20803879e-01 9.97314404e-02
  7.00334845e-04]
 [1.34110758e-04 1.90980916e-02 9.97314404e-02 1.90980916e-02
  1.34110758e-04]
 [9.41753536e-07 1.34110758e-04 7.00334845e-04 1.34110758e-04
  9.41753536e-07]]
New directory created to save the data:  /linux/meghislain/Results-RL//30_11_DQ2_tarSize5_SL900
 training :  [[19.03702973 19.55778204]
 [22.17604524 20.47266133]
 [16.84883918 19.13400917]
 [16.05102631 18.95544908]
 [24.03840192 21.19960726]
 [17.56709618 19.22748071]
 [20.14214079 20.09880819]
 [20.47763912 20.33012168]
 [18.64394264 19.68479602]
 [19.89992928 20.03033539]
 [23.29695094 20.91076   ]
 [16.17107573 18.80713304]
 [16.90480303 19.06415118]
 [21.34625783 20.41121148]
 [16.92961701 19.07392523]
 [23.99224148 21.26448585]
 [18.32428733 19.48041447]
 [23.90750433 21.272429  ]
 [22.25553824 20.85241846]
 [22.31871943 20.62388238]
 [22.73116608 20.74043494]
 [16.09977074 18.6105712 ]
 [21.24870016 20.11887847]
 [21.24413663 20.36090305]
 [21.18447666 20.65301919]
 [23.01238047 20.99036152]
 [22.17139995 20.62692516]
 [16.54617888 18.96684783]
 [16.24837924 18.82650738]
 [17.62798806 19.37783764]
 [17.97433299 19.28907786]
 [16.37551798 18.76708397]
 [24.04181656 21.02283697]
 [20.17463007 19.9624041 ]
 [17.87707682 19.18702636]
 [22.11808293 20.52892135]
 [17.07300116 19.22250881]
 [23.9435995  21.17829537]
 [23.37994626 21.03659796]
 [16.77922209 19.1603455 ]] 40
 validation :  [[18.43120964 19.49816528]
 [19.85347845 20.03044463]
 [17.20586192 19.17613461]
 [23.46649865 21.01737479]
 [19.96711006 20.03458232]
 [16.40867389 18.77321752]
 [16.14274695 18.68666134]
 [16.41194395 18.99208732]
 [16.56230022 19.02634477]
 [20.19441638 20.04971833]
 [22.86633716 20.93785248]
 [21.85440698 20.65558399]
 [23.35991921 21.04673735]
 [19.94446606 20.028039  ]
 [23.19500449 21.06560825]
 [18.57076763 19.61564112]
 [23.39905158 21.00702348]
 [23.43730158 21.05168295]
 [22.46267803 20.87230549]
 [18.24803727 19.35170906]
 [16.30000344 18.95953353]
 [16.06132851 18.70455648]
 [16.11534719 18.92201106]
 [22.74827251 20.86847371]
 [18.07847402 19.51058874]
 [22.70350629 20.78329408]
 [21.65237884 20.24754669]
 [21.82109216 20.66940225]
 [18.76433677 19.64580894]
 [20.2267984  19.93571766]] 30
[[9.41753536e-07 1.34110758e-04 7.00334845e-04 1.34110758e-04
  9.41753536e-07]
 [1.34110758e-04 1.90980916e-02 9.97314404e-02 1.90980916e-02
  1.34110758e-04]
 [7.00334845e-04 9.97314404e-02 5.20803879e-01 9.97314404e-02
  7.00334845e-04]
 [1.34110758e-04 1.90980916e-02 9.97314404e-02 1.90980916e-02
  1.34110758e-04]
 [9.41753536e-07 1.34110758e-04 7.00334845e-04 1.34110758e-04
  9.41753536e-07]]
 training :  [[19.03702973 19.55778204]
 [22.17604524 20.47266133]
 [16.84883918 19.13400917]
 [16.05102631 18.95544908]
 [24.03840192 21.19960726]
 [17.56709618 19.22748071]
 [20.14214079 20.09880819]
 [20.47763912 20.33012168]
 [18.64394264 19.68479602]
 [19.89992928 20.03033539]
 [23.29695094 20.91076   ]
 [16.17107573 18.80713304]
 [16.90480303 19.06415118]
 [21.34625783 20.41121148]
 [16.92961701 19.07392523]
 [23.99224148 21.26448585]
 [18.32428733 19.48041447]
 [23.90750433 21.272429  ]
 [22.25553824 20.85241846]
 [22.31871943 20.62388238]
 [22.73116608 20.74043494]
 [16.09977074 18.6105712 ]
 [21.24870016 20.11887847]
 [21.24413663 20.36090305]
 [21.18447666 20.65301919]
 [23.01238047 20.99036152]
 [22.17139995 20.62692516]
 [16.54617888 18.96684783]
 [16.24837924 18.82650738]
 [17.62798806 19.37783764]
 [17.97433299 19.28907786]
 [16.37551798 18.76708397]
 [24.04181656 21.02283697]
 [20.17463007 19.9624041 ]
 [17.87707682 19.18702636]
 [22.11808293 20.52892135]
 [17.07300116 19.22250881]
 [23.9435995  21.17829537]
 [23.37994626 21.03659796]
 [16.77922209 19.1603455 ]] 40
 validation :  [[18.43120964 19.49816528]
 [19.85347845 20.03044463]
 [17.20586192 19.17613461]
 [23.46649865 21.01737479]
 [19.96711006 20.03458232]
 [16.40867389 18.77321752]
 [16.14274695 18.68666134]
 [16.41194395 18.99208732]
 [16.56230022 19.02634477]
 [20.19441638 20.04971833]
 [22.86633716 20.93785248]
 [21.85440698 20.65558399]
 [23.35991921 21.04673735]
 [19.94446606 20.028039  ]
 [23.19500449 21.06560825]
 [18.57076763 19.61564112]
 [23.39905158 21.00702348]
 [23.43730158 21.05168295]
 [22.46267803 20.87230549]
 [18.24803727 19.35170906]
 [16.30000344 18.95953353]
 [16.06132851 18.70455648]
 [16.11534719 18.92201106]
 [22.74827251 20.86847371]
 [18.07847402 19.51058874]
 [22.70350629 20.78329408]
 [21.65237884 20.24754669]
 [21.82109216 20.66940225]
 [18.76433677 19.64580894]
 [20.2267984  19.93571766]] 30
doseMaps
incert
doseMaps
incert
MultiInputPolicy(
  (q_net): QNetwork(
    (features_extractor): Custom_CombinedExtractor(
      (extractors): ModuleDict(
        (doseMaps): Custom_CNN(
          (cnn): Sequential(
            (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
            (1): ReLU()
            (2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1))
            (3): ReLU()
            (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
            (7): ReLU()
            (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
            (9): ReLU()
            (10): Flatten(start_dim=1, end_dim=-1)
          )
          (linear): Sequential(
            (0): Linear(in_features=115200, out_features=256, bias=True)
            (1): ReLU()
          )
        )
        (incert): Custom_CNN(
          (cnn): Sequential(
            (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(1, 1))
            (1): ReLU()
            (2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1))
            (3): ReLU()
            (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
            (7): ReLU()
            (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
            (9): ReLU()
            (10): Flatten(start_dim=1, end_dim=-1)
          )
          (linear): Sequential(
            (0): Linear(in_features=115200, out_features=256, bias=True)
            (1): ReLU()
          )
        )
      )
    )
    (q_net): Sequential(
      (0): Linear(in_features=512, out_features=128, bias=True)
      (1): ReLU()
      (2): Linear(in_features=128, out_features=64, bias=True)
      (3): ReLU()
      (4): Linear(in_features=64, out_features=32, bias=True)
      (5): ReLU()
      (6): Linear(in_features=32, out_features=6, bias=True)
    )
  )
  (q_net_target): QNetwork(
    (features_extractor): Custom_CombinedExtractor(
      (extractors): ModuleDict(
        (doseMaps): Custom_CNN(
          (cnn): Sequential(
            (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
            (1): ReLU()
            (2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1))
            (3): ReLU()
            (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
            (7): ReLU()
            (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
            (9): ReLU()
            (10): Flatten(start_dim=1, end_dim=-1)
          )
          (linear): Sequential(
            (0): Linear(in_features=115200, out_features=256, bias=True)
            (1): ReLU()
          )
        )
        (incert): Custom_CNN(
          (cnn): Sequential(
            (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(1, 1))
            (1): ReLU()
            (2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1))
            (3): ReLU()
            (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
            (7): ReLU()
            (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
            (9): ReLU()
            (10): Flatten(start_dim=1, end_dim=-1)
          )
          (linear): Sequential(
            (0): Linear(in_features=115200, out_features=256, bias=True)
            (1): ReLU()
          )
        )
      )
    )
    (q_net): Sequential(
      (0): Linear(in_features=512, out_features=128, bias=True)
      (1): ReLU()
      (2): Linear(in_features=128, out_features=64, bias=True)
      (3): ReLU()
      (4): Linear(in_features=64, out_features=32, bias=True)
      (5): ReLU()
      (6): Linear(in_features=32, out_features=6, bias=True)
    )
  )
)
epoch number :  0
/linux/meghislain/ARIES-RL/stable_baselines3/common/vec_env/patch_gym.py:49: UserWarning: You provided an OpenAI Gym environment. We strongly recommend transitioning to Gymnasium environments. Stable-Baselines3 is automatically wrapping your environments in a compatibility layer, which could potentially cause issues.
  warnings.warn(
epoch number :  1
epoch number :  2
epoch number :  3
epoch number :  4
epoch number :  5
epoch number :  6
Traceback (most recent call last):
  File "/linux/meghislain/ARIES-RL/main.py", line 52, in <module>
    wandb.log({"mean reward": mean_reward/(5*2*number_pixel_to_touch), "standard deviation of the reward": std_reward, "treatment time": time, "learning rate": model.learning_rate, "Difference of final DM": DM, "Difference on PTV": DM_PTV, "Dose moyenne PTV" : d_meanPTV, "Dose moyenne OAR":d_meanOAR, "Dose moyenne Autour":d_meanAutour, "D98 PTV":D98_PTV, "D30 OAR":D30_OAR, "minimum PTV" : mini, "D98_PTV_treat " : D98_PTV_treat, "D80_PTV_treat " : D80_PTV_treat, "D30_OAR_treat ": D30_OAR_treat, "mean_OAR_treat ": mean_OAR_treat})
  File "/linux/meghislain/ARIES-RL/ARIES/evaluation.py", line 237, in evaluate_over_treatment_daily
    obs, reward, done, info = env.step(action)
  File "/linux/meghislain/ARIES-RL/ARIES/Env_incertitude.py", line 262, in step
    self.DM_i_noisy = scipy.ndimage.shift(self.DMi_inRef_noisy, shift, order=1)
  File "/export/share/condaenv/STB3/lib/python3.9/site-packages/scipy/ndimage/_interpolation.py", line 689, in shift
    _nd_image.zoom_shift(filtered, None, shift, output, order, mode, cval,
KeyboardInterrupt