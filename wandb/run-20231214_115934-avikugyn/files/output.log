yeah  1
yeah  1
[[0.01917244 0.1001197  0.01917244]
 [0.1001197  0.52283142 0.1001197 ]
 [0.01917244 0.1001197  0.01917244]]
 training :  [[20.80559456 18.28309685]
 [17.71797829 17.26251557]
 [18.12931847 17.28143987]
 [19.41096923 17.763459  ]
 [18.86460164 17.68696018]
 [20.67086822 18.33995953]
 [13.56676987 15.93696325]
 [16.71808625 16.78995518]
 [14.30962514 16.35797156]
 [15.04815566 16.41757044]
 [13.99640421 15.98415227]
 [13.37272212 15.91055011]
 [13.23481515 16.09866158]
 [13.52131531 15.96332679]
 [14.76593791 16.37833182]
 [19.36228032 17.84027826]
 [16.02488832 16.51531575]
 [13.68044916 16.08802227]
 [13.44432723 15.85955058]
 [20.38158467 17.98740523]
 [16.71305026 16.94442737]
 [13.67319542 15.99385375]
 [18.53252829 17.43789202]
 [21.04266001 17.99331536]
 [14.56250385 16.34577822]
 [20.99888665 18.17500935]
 [20.99133372 18.21310813]
 [17.79107038 17.23359565]
 [20.28384569 17.94299043]
 [20.37971742 18.19814227]
 [13.33083267 15.87500433]
 [13.22966947 15.95716872]
 [20.82726481 18.19404445]
 [14.00648823 16.30437288]
 [20.64412689 18.26276121]
 [16.45032273 16.78454345]
 [13.72229949 16.08582146]
 [20.92410441 18.20843383]
 [16.85072389 16.97146128]
 [19.24430775 17.64066685]] 40
 validation :  [[20.25339061 18.08604562]
 [19.42717654 17.53060146]
 [19.36517502 17.7168203 ]
 [19.28705812 17.69730398]
 [20.20020584 17.8828019 ]
 [20.76658468 18.12385979]
 [13.23295118 15.87624243]
 [17.40591351 17.26677674]
 [20.63863844 17.93549564]
 [13.0852409  15.87733759]
 [20.79425422 18.24824589]
 [20.52510352 18.17992295]
 [20.97229349 18.24115338]
 [13.15315485 16.04680373]
 [17.4060504  17.13524242]
 [14.4411954  16.2497144 ]
 [17.64294175 17.31647344]
 [16.40149841 16.83070299]
 [17.04875488 16.96439635]
 [16.45256101 16.9538732 ]
 [18.5112834  17.44698079]
 [13.48519169 15.84838115]
 [19.71946138 17.7890011 ]
 [13.05456345 15.80278065]
 [20.21945167 17.892016  ]
 [14.67176045 16.02208021]
 [15.73817424 16.7056429 ]
 [15.28788493 16.56069485]
 [15.83300976 16.52347808]
 [18.0307227  17.21466258]] 30
[[0.01917244 0.1001197  0.01917244]
 [0.1001197  0.52283142 0.1001197 ]
 [0.01917244 0.1001197  0.01917244]]
 training :  [[20.80559456 18.28309685]
 [17.71797829 17.26251557]
 [18.12931847 17.28143987]
 [19.41096923 17.763459  ]
 [18.86460164 17.68696018]
 [20.67086822 18.33995953]
 [13.56676987 15.93696325]
 [16.71808625 16.78995518]
 [14.30962514 16.35797156]
 [15.04815566 16.41757044]
 [13.99640421 15.98415227]
 [13.37272212 15.91055011]
 [13.23481515 16.09866158]
 [13.52131531 15.96332679]
 [14.76593791 16.37833182]
 [19.36228032 17.84027826]
 [16.02488832 16.51531575]
 [13.68044916 16.08802227]
 [13.44432723 15.85955058]
 [20.38158467 17.98740523]
 [16.71305026 16.94442737]
 [13.67319542 15.99385375]
 [18.53252829 17.43789202]
 [21.04266001 17.99331536]
 [14.56250385 16.34577822]
 [20.99888665 18.17500935]
 [20.99133372 18.21310813]
 [17.79107038 17.23359565]
 [20.28384569 17.94299043]
 [20.37971742 18.19814227]
 [13.33083267 15.87500433]
 [13.22966947 15.95716872]
 [20.82726481 18.19404445]
 [14.00648823 16.30437288]
 [20.64412689 18.26276121]
 [16.45032273 16.78454345]
 [13.72229949 16.08582146]
 [20.92410441 18.20843383]
 [16.85072389 16.97146128]
 [19.24430775 17.64066685]] 40
 validation :  [[20.25339061 18.08604562]
 [19.42717654 17.53060146]
 [19.36517502 17.7168203 ]
 [19.28705812 17.69730398]
 [20.20020584 17.8828019 ]
 [20.76658468 18.12385979]
 [13.23295118 15.87624243]
 [17.40591351 17.26677674]
 [20.63863844 17.93549564]
 [13.0852409  15.87733759]
 [20.79425422 18.24824589]
 [20.52510352 18.17992295]
 [20.97229349 18.24115338]
 [13.15315485 16.04680373]
 [17.4060504  17.13524242]
 [14.4411954  16.2497144 ]
 [17.64294175 17.31647344]
 [16.40149841 16.83070299]
 [17.04875488 16.96439635]
 [16.45256101 16.9538732 ]
 [18.5112834  17.44698079]
 [13.48519169 15.84838115]
 [19.71946138 17.7890011 ]
 [13.05456345 15.80278065]
 [20.21945167 17.892016  ]
 [14.67176045 16.02208021]
 [15.73817424 16.7056429 ]
 [15.28788493 16.56069485]
 [15.83300976 16.52347808]
 [18.0307227  17.21466258]] 30
MultiInputPolicy(
  (q_net): QNetwork(
    (features_extractor): CombinedExtractor(
      (extractors): ModuleDict(
        (doseMaps): NatureCNN(
          (cnn): Sequential(
            (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
            (1): ReLU()
            (2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1))
            (3): ReLU()
            (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
            (7): ReLU()
            (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
            (9): ReLU()
            (10): Flatten(start_dim=1, end_dim=-1)
          )
          (linear): Sequential(
            (0): Linear(in_features=73728, out_features=256, bias=True)
            (1): ReLU()
          )
        )
        (incert): NatureCNN(
          (cnn): Sequential(
            (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(1, 1))
            (1): ReLU()
            (2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1))
            (3): ReLU()
            (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
            (7): ReLU()
            (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
            (9): ReLU()
            (10): Flatten(start_dim=1, end_dim=-1)
          )
          (linear): Sequential(
            (0): Linear(in_features=73728, out_features=256, bias=True)
            (1): ReLU()
          )
        )
      )
    )
    (q_net): Sequential(
      (0): Linear(in_features=512, out_features=128, bias=True)
      (1): ReLU()
      (2): Linear(in_features=128, out_features=64, bias=True)
      (3): ReLU()
      (4): Linear(in_features=64, out_features=32, bias=True)
      (5): ReLU()
      (6): Linear(in_features=32, out_features=6, bias=True)
    )
  )
  (q_net_target): QNetwork(
    (features_extractor): CombinedExtractor(
      (extractors): ModuleDict(
        (doseMaps): NatureCNN(
          (cnn): Sequential(
            (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1))
            (1): ReLU()
            (2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1))
            (3): ReLU()
            (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
            (7): ReLU()
            (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
            (9): ReLU()
            (10): Flatten(start_dim=1, end_dim=-1)
          )
          (linear): Sequential(
            (0): Linear(in_features=73728, out_features=256, bias=True)
            (1): ReLU()
          )
        )
        (incert): NatureCNN(
          (cnn): Sequential(
            (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(1, 1))
            (1): ReLU()
            (2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1))
            (3): ReLU()
            (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
            (7): ReLU()
            (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
            (9): ReLU()
            (10): Flatten(start_dim=1, end_dim=-1)
          )
          (linear): Sequential(
            (0): Linear(in_features=73728, out_features=256, bias=True)
            (1): ReLU()
          )
        )
      )
    )
    (q_net): Sequential(
      (0): Linear(in_features=512, out_features=128, bias=True)
      (1): ReLU()
      (2): Linear(in_features=128, out_features=64, bias=True)
      (3): ReLU()
      (4): Linear(in_features=64, out_features=32, bias=True)
      (5): ReLU()
      (6): Linear(in_features=32, out_features=6, bias=True)
    )
  )
)
epoch number :  0
training mode :  0 [14.30962514 16.35797156]
training mode :  1 [15.04815566 16.41757044]
/linux/meghislain/ARIES-RL/stable_baselines3/common/vec_env/patch_gym.py:49: UserWarning: You provided an OpenAI Gym environment. We strongly recommend transitioning to Gymnasium environments. Stable-Baselines3 is automatically wrapping your environments in a compatibility layer, which could potentially cause issues.
  warnings.warn(
training mode :  2 [20.99133372 18.21310813]
training mode :  3 [21.04266001 17.99331536]
training mode :  4 [18.12931847 17.28143987]
training mode :  5 [13.72229949 16.08582146]
training mode :  6 [20.80559456 18.28309685]
training mode :  7 [17.79107038 17.23359565]
training mode :  8 [14.76593791 16.37833182]
training mode :  9 [13.22966947 15.95716872]
Traceback (most recent call last):
  File "/linux/meghislain/ARIES-RL/main.py", line 53, in <module>
    model.learn(total_timesteps=TIMESTEPS)
  File "/linux/meghislain/ARIES-RL/stable_baselines3/dqn/dqn.py", line 268, in learn
    return super().learn(
  File "/linux/meghislain/ARIES-RL/stable_baselines3/common/off_policy_algorithm.py", line 348, in learn
    self.train(batch_size=self.batch_size, gradient_steps=gradient_steps)
  File "/linux/meghislain/ARIES-RL/stable_baselines3/dqn/dqn.py", line 221, in train
    self.policy.optimizer.step()
  File "/export/share/condaenv/STB3/lib/python3.9/site-packages/torch/optim/optimizer.py", line 280, in wrapper
    out = func(*args, **kwargs)
  File "/export/share/condaenv/STB3/lib/python3.9/site-packages/torch/optim/optimizer.py", line 33, in _use_grad
    ret = func(self, *args, **kwargs)
  File "/export/share/condaenv/STB3/lib/python3.9/site-packages/torch/optim/adam.py", line 141, in step
    adam(
  File "/export/share/condaenv/STB3/lib/python3.9/site-packages/torch/optim/adam.py", line 281, in adam
    func(params,
  File "/export/share/condaenv/STB3/lib/python3.9/site-packages/torch/optim/adam.py", line 391, in _single_tensor_adam
    denom = (exp_avg_sq.sqrt() / bias_correction2_sqrt).add_(eps)
KeyboardInterrupt